/* 
 * create-component.js 
 * This is a function for creating a new component for the website.
 */ 

const express = require('express');
const router = express.Router(); 
const sqlite3 = require('sqlite3'); 
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');
const path = require('path');

const db = require('./initDB.js');

const insertQuery = `INSERT INTO components (component_name, component_type, data, uuid) VALUES (?, ?, ?, ?)` ;
const sanity = `SELECT * from components`; 

class ComponentStructure { 
  constructor(type, id, data) {
    this.type = type; 
    this.id = id;
    this.data = data;
  } 
}

async function insertItem(params) { 
  try {
    await new Promise((resolve, reject) => {
      db.run(insertQuery, params, (err) => {  
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  } catch (err) {  
    console.error("Error inserting item:", err);
    throw err;
  }
}

async function sanityCheck() {  
  try {
    const rows = await new Promise((resolve, reject) => { 
      db.all(sanity, (err, rows) => { 
        if (err) { 
          reject(err); 
        } else { 
          resolve(rows);
        }
      });
    });
    return rows;
  } catch (err) {
    console.error("Error performing sanity check:", err);
    throw err;
  }
}

async function createBody(compData) {
  const { name, profile, children } = compData; 
  const final = `<AboutSection name="${name}" left={false} profile="${profile}">
  ${children}
</AboutSection>`;

  const newId = uuidv4();
  const params = ["test", "textbox", final, newId]; 

  try {
    await insertItem(params);
    const imageInsertionResult = await insertImage({ data: profile });

    const rows = await sanityCheck();

    console.log(rows); 
    console.log(imageInsertionResult); 
  } catch (err) {
    console.log("Error creating body component:", err); 
  }

  return final;
}

async function insertImage(compData) {
  const { data } = compData;
  const binaryData = Buffer.from(data, 'base64');
  const filename = `image_${Date.now()}.jpg`; 
  const filePath = path.join(__dirname, 'public', filename);

  try {
    await fs.promises.writeFile(filePath, binaryData);
    const newId = uuidv4();
    const params = ["test", "image", filePath, newId];
    await insertItem(params);
    const rows = await sanityCheck();
    console.log(rows); 
  } catch (err) {
    console.error("Error while inserting image:", err);
    throw err;
  }
}

async function createCard(compData) {
  const { name, profile, body } = compData;

  try {
    const profileImageInsertionResult = await insertImage({ data: profile });
    const bodyComponent = await createBody({ name, profile, children: body });

    return {
      header: name,
      body: bodyComponent,
      profileImageInsertionResult: profileImageInsertionResult,
    };
  } catch (error) {
    console.error("Error creating card:", error);
    throw error; 
  }
}

module.exports = { createCard, createBody, insertImage, insertItem, sanityCheck };
