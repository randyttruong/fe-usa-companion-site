/* 
 * create-component.js 
    * This is a function for creating a new component for the website.
 */ 

const app= require('../server.js');  

const express = require('express');
const router = express.Router(); 
const sqlite3 = require('sqlite3'); 

const db = require('./initDB.js')

const insertQuery = `INSERT INTO components (component_name, component_type, data) VALUES (?, ?, ?)` ;
const sanity = `SELECT * from components`; 

// What are the different attributes of a React component? 
// - Component Type 
// - Classname / id 
// - data

class componentStructure { 
  constructor(type, id, data) {
    this.type = type; 
    this.id = id;
    this.data = data;
  } 
}

async function insertItem(params) { 
  const { } = params  


  try {
    const resp1 = await db.run(insertQuery, (err) => {  
      if (err) { reject(err) } 
      else { resolve() }
    })

  } catch (err) {  
    return 
  }

  return 
}

async function sanityCheck() {  
  const resp = await new Promise((resolve, reject) => { 
    db.all(sanity, (err, rows) => { 
      if (err) { reject(err) } 
      else { resolve(rows) }
    })
  })

  return resp 
}


async function createBody(compData) {
  const { name, profile, children } = compData; 
  let final = `<AboutSection name="${name}" left={false} profile="${profile}">
  ${children}
</AboutSection>`;

  const params = ["test", "textbox", data]; 

  try {
   
    await new Promise((resolve, reject) => { 
      db.run(insertQuery, params, (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    }); 

    
    const imageInsertionResult = await insertImage(profile); 

    
    const rows = await new Promise((resolve, reject) => { 
      db.all(sanity, (err, rows) => {  
        if (err) { 
          reject(err);
        } else {  
          resolve(rows);
        }
      });
    });

    console.log(rows); 
    console.log(imageInsertionResult); 

  } catch (err) {
    console.log(err); 
  }

  return final;
} 


async function insertImage(compData) {
  const { data } = compData;
  const binaryData = Buffer.from(data, 'base64');

  const params = ["test", "image", binaryData];

  try {
    const resp = await new Promise((resolve, reject) => { 
      db.run(insertQuery, params, (err) => {
        if (err) {
          reject(err) 
        } else {
          resolve() 
        }
      })
    }); 

    const resp2 = await new Promise((resolve, reject) => { 
      db.all(sanity, (err, rows) => {  
        if (err) { 
          reject(err)
        } else {  
          resolve(rows)
        }
      }) 
    })

    console.log(resp2); 

  } catch (err) {
    console.log(err); 

  }
}


async function createCard(compData) {
  const { name, profile, body } = compData;

  try {
    
    const profileImageInsertionResult = await insertImage(profileImage);

    const bodyComponent = await createBody({ name: name, profile: profile, children: body });

    return {
      header: headerComponent,
      body: bodyComponent,
      profileImageInsertionResult: profileImageInsertionResult,
      
    };
  } catch (error) {
   
    console.error("Error creating card:", error);
    throw error; 
  }
}
